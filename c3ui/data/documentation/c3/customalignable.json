{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomAlignable"},{"kind":"text","text":" : AnyObject"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/c3\/customalignable"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/com.davidbjames.C3\/documentation\/C3\/AlignedTextLayer","doc:\/\/com.davidbjames.C3\/documentation\/C3\/Backdrop","doc:\/\/com.davidbjames.C3\/documentation\/C3\/Button","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CancelButton","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CancelButton2","doc:\/\/com.davidbjames.C3\/documentation\/C3\/Caption","doc:\/\/com.davidbjames.C3\/documentation\/C3\/ConfirmButton","doc:\/\/com.davidbjames.C3\/documentation\/C3\/ConfirmButton2","doc:\/\/com.davidbjames.C3\/documentation\/C3\/ControlButton","doc:\/\/com.davidbjames.C3\/documentation\/C3\/ControlButton2","doc:\/\/com.davidbjames.C3\/documentation\/C3\/DismissableButton","doc:\/\/com.davidbjames.C3\/documentation\/C3\/DisplayText","doc:\/\/com.davidbjames.C3\/documentation\/C3\/EditableText","doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExclusiveButton","doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExclusiveControlButton","doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExclusiveControlButton2","doc:\/\/com.davidbjames.C3\/documentation\/C3\/Label","doc:\/\/com.davidbjames.C3\/documentation\/C3\/SwitchableButton","doc:\/\/com.davidbjames.C3\/documentation\/C3\/SwitchableControlButton","doc:\/\/com.davidbjames.C3\/documentation\/C3\/SwitchableControllButton2","doc:\/\/com.davidbjames.C3\/documentation\/C3\/TextField","doc:\/\/com.davidbjames.C3\/documentation\/C3\/TextLayer","doc:\/\/com.davidbjames.C3\/documentation\/C3\/TextMask"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Any class that can tweak it’s alignment rectangle"},{"type":"text","text":" "},{"type":"text","text":"for the purpose of alignment to any of it’s edges."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomAlignable"}],"title":"CustomAlignable","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:2C315CustomAlignableP","modules":[{"name":"C3"}],"navigatorTitle":[{"kind":"identifier","text":"CustomAlignable"}]},"hierarchy":{"paths":[["doc:\/\/com.davidbjames.C3\/documentation\/C3"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable\/alignmentOptions","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable\/customAlignmentRectInsets-2xmxs"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable\/activate(_:)","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable\/deactivate(_:)"]}],"references":{"doc://com.davidbjames.C3/documentation/C3/AlignedTextLayer":{"role":"symbol","title":"AlignedTextLayer","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AlignedTextLayer"}],"abstract":[{"type":"text","text":"Special text layer class that supports"},{"type":"text","text":" "},{"type":"text","text":"vertically aligned text."},{"type":"text","text":" "},{"type":"text","text":"CAVEAT: Support for layer addons (gradients,"},{"type":"text","text":" "},{"type":"text","text":"tiles, shadows) may not work as expected."},{"type":"text","text":" "},{"type":"text","text":"If you don’t absolutely need vertical alignment"},{"type":"text","text":" "},{"type":"text","text":"prefer TextLayer instead which is more reliable."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/AlignedTextLayer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AlignedTextLayer"}],"url":"\/documentation\/c3\/alignedtextlayer"},"doc://com.davidbjames.C3/documentation/C3/CancelButton":{"role":"symbol","title":"CancelButton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancelButton"}],"abstract":[{"type":"text","text":"CancelButton supports canceling and dismissing a related"},{"type":"text","text":" "},{"type":"text","text":"ancestor Presentable if initialized with “dismissive”."},{"type":"text","text":" "},{"type":"text","text":"Adhoc actions can be attached to this button or via"},{"type":"text","text":" "},{"type":"text","text":"delegate using Mutator event API."},{"type":"text","text":" "},{"type":"text","text":"This button is automatically “control state updatable”"},{"type":"text","text":" "},{"type":"text","text":"for theme changes on the button itself and potentially on a"},{"type":"text","text":" "},{"type":"text","text":"ControlBackground (layer) if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"},{"type":"text","text":" "},{"type":"text","text":"This button supports optionally constructing with data on"},{"type":"text","text":" "},{"type":"text","text":"attachment (i.e. via in(..data:) method). The data type to"},{"type":"text","text":" "},{"type":"text","text":"provide is a tuple of button text, optional button outset,"},{"type":"text","text":" "},{"type":"text","text":"and whether or not to add a control background."},{"type":"text","text":" "},{"type":"text","text":"(You may create multiple buttons this way by providing"},{"type":"text","text":" "},{"type":"text","text":"multiple data tuples as normal with ConstructibleWithData.)"},{"type":"text","text":" "},{"type":"text","text":"Passing a theme to in() is optional but preferred (the theme"},{"type":"text","text":" "},{"type":"text","text":"will be applied to the button as well as the background)."},{"type":"text","text":" "},{"type":"text","text":"The default background type is ControlBackground but you may"},{"type":"text","text":" "},{"type":"text","text":"also use a custom subclass of ControlBackground by subclassing"},{"type":"text","text":" "},{"type":"text","text":"the button class and assigning the new background type to the"},{"type":"text","text":" "},{"type":"text","text":"typealias UpdatableBackground. Example:"},{"type":"text","text":" "},{"type":"text","text":"class MyButton : CancelButton { typealias UpdatableBackground = MyBackground }"},{"type":"text","text":" "},{"type":"text","text":"If you pass a theme that inherits from the built-in theme"},{"type":"text","text":" "},{"type":"text","text":"(via Theme.getBuiltInTheme()) then this button and it’s"},{"type":"text","text":" "},{"type":"text","text":"background will inherit the default styling."},{"type":"text","text":" "},{"type":"text","text":"(If you want the background to receive the default styling"},{"type":"text","text":" "},{"type":"text","text":"your Theme must also statically conform to ExtendedStyleAccessible"},{"type":"text","text":" "},{"type":"text","text":"with the static property ExtendedStyleDefaults, with"},{"type":"text","text":" "},{"type":"text","text":"usesButtonBackgroundLayers set to true.)"},{"type":"text","text":" "},{"type":"text","text":"If you choose to use this initializer but do not want the"},{"type":"text","text":" "},{"type":"text","text":"background to appear at all you may either hide it manually:"},{"type":"text","text":" "},{"type":"text","text":"e.g. .with { $0.backgrounds }.hide()"},{"type":"text","text":" "},{"type":"text","text":"or create a style in your theme to hide it:"},{"type":"text","text":" "},{"type":"text","text":"e.g. MyCancelButton.self > Background.self => .contentAlpha(0.0)"},{"type":"text","text":" "},{"type":"text","text":"CAVEAT: If you want to use a custom Model type (not the one"},{"type":"text","text":" "},{"type":"text","text":"that is already on ControlButton) you cannot use this class due to"},{"type":"text","text":" "},{"type":"text","text":"generics limitations. Use DismissableButton or Button instead with"},{"type":"text","text":" "},{"type":"text","text":"ControlStateCombinedUpdatable as necessary. You will also"},{"type":"text","text":" "},{"type":"text","text":"probably want to conform to DismissableButtonConfigurable"},{"type":"text","text":" "},{"type":"text","text":"to get the tap action to dismiss."},{"type":"text","text":" "},{"type":"text","text":"See also CancelButton2 that supports Shape backgrounds."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CancelButton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CancelButton"}],"url":"\/documentation\/c3\/cancelbutton"},"doc://com.davidbjames.C3/documentation/C3/EditableText":{"role":"symbol","title":"EditableText","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EditableText"}],"abstract":[{"type":"text","text":"Text view configured for text editing."},{"type":"text","text":" "},{"type":"text","text":"(this is the default configuration for a UITextView)"},{"type":"text","text":" "},{"type":"text","text":"See also DisplayText that is configured for display."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/EditableText","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EditableText"}],"url":"\/documentation\/c3\/editabletext"},"doc://com.davidbjames.C3/documentation/C3/ConfirmButton2":{"role":"symbol","title":"ConfirmButton2","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConfirmButton2"}],"abstract":[{"type":"text","text":"ConfirmButton2 supports firing attached actions and handles"},{"type":"text","text":" "},{"type":"text","text":"dismissing any related ancestor Presentable if initialized"},{"type":"text","text":" "},{"type":"text","text":"with “dismissive”."},{"type":"text","text":" "},{"type":"text","text":"Adhoc actions can be attached to this button or via"},{"type":"text","text":" "},{"type":"text","text":"delegate using Mutator event API."},{"type":"text","text":" "},{"type":"text","text":"This button is automatically “control state updatable” for"},{"type":"text","text":" "},{"type":"text","text":"theme changes on the button itself and potentially on a"},{"type":"text","text":" "},{"type":"text","text":"background Shape if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"},{"type":"text","text":" "},{"type":"text","text":"This button is also Dismissable if “dismissive” is passed."},{"type":"text","text":" "},{"type":"text","text":"This button supports constructing with data on attachment"},{"type":"text","text":" "},{"type":"text","text":"(i.e. via in(..data:) method). The data type to provide"},{"type":"text","text":" "},{"type":"text","text":"is a tuple of button text, optional button outset,"},{"type":"text","text":" "},{"type":"text","text":"and optional corner spec. Using this approach will cause a"},{"type":"text","text":" "},{"type":"text","text":"rectangular shape background (that is also control state"},{"type":"text","text":" "},{"type":"text","text":"updatable) to be added. (The rectangle will obtain corner"},{"type":"text","text":" "},{"type":"text","text":"spec if provided.) Passing a theme to in() is optional"},{"type":"text","text":" "},{"type":"text","text":"but preferred (the theme will be applied to the button"},{"type":"text","text":" "},{"type":"text","text":"as well as the shape)."},{"type":"text","text":" "},{"type":"text","text":"(You may create multiple buttons this way by providing"},{"type":"text","text":" "},{"type":"text","text":"multiple data tuples as per normal with ConstructibleWithData.)"},{"type":"text","text":" "},{"type":"text","text":"If you prefer to use your own custom shape for this button"},{"type":"text","text":" "},{"type":"text","text":"then do not use the construct-with-data approach or alternatively,"},{"type":"text","text":" "},{"type":"text","text":"override the construct(data:) method. But keep in mind that"},{"type":"text","text":" "},{"type":"text","text":"your custom shape should pass “updatable:true” to ensure"},{"type":"text","text":" "},{"type":"text","text":"it can participate in control state updates."},{"type":"text","text":" "},{"type":"text","text":"If you pass a theme that inherits from the built-in theme"},{"type":"text","text":" "},{"type":"text","text":"(via Theme.getBuiltInTheme()) then this button and it’s"},{"type":"text","text":" "},{"type":"text","text":"background will inherit the default styling."},{"type":"text","text":" "},{"type":"text","text":"(If you want the background to receive the default styling"},{"type":"text","text":" "},{"type":"text","text":"your Theme must also statically conform to ExtendedStyleAccessible"},{"type":"text","text":" "},{"type":"text","text":"with the static property ExtendedStyleDefaults, with"},{"type":"text","text":" "},{"type":"text","text":"usesButtonBackgroundLayers set to true.)"},{"type":"text","text":" "},{"type":"text","text":"If you choose to use this initializer but do not want the"},{"type":"text","text":" "},{"type":"text","text":"background to appear at all you may either hide it manually:"},{"type":"text","text":" "},{"type":"text","text":"e.g. .with { $0.shapes }.hide()"},{"type":"text","text":" "},{"type":"text","text":"or create a style in your theme to hide it:"},{"type":"text","text":" "},{"type":"text","text":"e.g. MyConfirmButton.self > Shape.self => .contentAlpha(0.0)"},{"type":"text","text":" "},{"type":"text","text":"CAVEAT: If you want to use a custom Model type (not the one"},{"type":"text","text":" "},{"type":"text","text":"that is already on ControlButton2) you cannot use this class due to"},{"type":"text","text":" "},{"type":"text","text":"generics limitations. Use DismissableButton or Button instead with"},{"type":"text","text":" "},{"type":"text","text":"ControlStateCombinedUpdatable as necessary."},{"type":"text","text":" "},{"type":"text","text":"See also ConfirmButton that supports regular layer backgrounds."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ConfirmButton2","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ConfirmButton2"}],"url":"\/documentation\/c3\/confirmbutton2"},"doc://com.davidbjames.C3/documentation/C3/Caption":{"role":"symbol","title":"Caption","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Caption"}],"abstract":[{"type":"text","text":"Label representing caption text for some other item."},{"type":"text","text":" "},{"type":"text","text":"It’s not normally necessary to instantiate this – it"},{"type":"text","text":" "},{"type":"text","text":"is done for you via Mutator.createCaption() API."},{"type":"text","text":" "},{"type":"text","text":"(however you can use the type for query\/filtering)"}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Caption","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Caption"}],"url":"\/documentation\/c3\/caption"},"doc://com.davidbjames.C3/documentation/C3":{"role":"collection","title":"C3","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3","kind":"symbol","type":"topic","url":"\/documentation\/c3"},"doc://com.davidbjames.C3/documentation/C3/ControlButton":{"role":"symbol","title":"ControlButton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ControlButton"}],"abstract":[{"type":"text","text":"ControlButton is kind of button that is automatically"},{"type":"text","text":" "},{"type":"text","text":"“control state updatable” for theme changes on the button"},{"type":"text","text":" "},{"type":"text","text":"itself and potentially on a ControlBackground (layer) if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"},{"type":"text","text":" "},{"type":"text","text":"This button is also Dismissable if “dismissive” is passed."},{"type":"text","text":" "},{"type":"text","text":"This button supports optionally constructing with data on"},{"type":"text","text":" "},{"type":"text","text":"attachment (i.e. via in(..data:) method). The data type to"},{"type":"text","text":" "},{"type":"text","text":"provide is a tuple of button text, optional button outset,"},{"type":"text","text":" "},{"type":"text","text":"and whether or not to add a control background."},{"type":"text","text":" "},{"type":"text","text":"(You may create multiple buttons this way by providing"},{"type":"text","text":" "},{"type":"text","text":"multiple data tuples as normal with ConstructibleWithData.)"},{"type":"text","text":" "},{"type":"text","text":"Passing a theme to in() is optional but preferred (the theme"},{"type":"text","text":" "},{"type":"text","text":"will be applied to the button as well as the background)."},{"type":"text","text":" "},{"type":"text","text":"The default background type is ControlBackground but you may"},{"type":"text","text":" "},{"type":"text","text":"also use a custom subclass of ControlBackground by subclassing"},{"type":"text","text":" "},{"type":"text","text":"the button class and assigning the new background type to the"},{"type":"text","text":" "},{"type":"text","text":"typealias UpdatableBackground. Example:"},{"type":"text","text":" "},{"type":"text","text":"class MyButton : ConfirmButton { typealias UpdatableBackground = MyBackground }"},{"type":"text","text":" "},{"type":"text","text":"If you pass a theme that inherits from the built-in theme"},{"type":"text","text":" "},{"type":"text","text":"(via Theme.getBuiltInTheme()) then this button and it’s"},{"type":"text","text":" "},{"type":"text","text":"background will inherit the default styling."},{"type":"text","text":" "},{"type":"text","text":"(If you want the background to receive the default styling"},{"type":"text","text":" "},{"type":"text","text":"your Theme must also statically conform to ExtendedStyleAccessible"},{"type":"text","text":" "},{"type":"text","text":"with the static property ExtendedStyleDefaults, with"},{"type":"text","text":" "},{"type":"text","text":"usesButtonBackgroundLayers set to true.)"},{"type":"text","text":" "},{"type":"text","text":"If you choose to use this initializer but do not want the"},{"type":"text","text":" "},{"type":"text","text":"background to appear at all you may either hide it manually:"},{"type":"text","text":" "},{"type":"text","text":"e.g. .with { $0.backgrounds }.hide()"},{"type":"text","text":" "},{"type":"text","text":"or create a style in your theme to hide it:"},{"type":"text","text":" "},{"type":"text","text":"e.g. MyControlButton.self > Background.self => .contentAlpha(0.0)"},{"type":"text","text":" "},{"type":"text","text":"CAVEAT: If you want to use a custom Model type (not the one"},{"type":"text","text":" "},{"type":"text","text":"that is already on ControlButton) you cannot use this class due to"},{"type":"text","text":" "},{"type":"text","text":"generics limitations. Use DismissableButton or Button instead with"},{"type":"text","text":" "},{"type":"text","text":"ControlStateCombinedUpdatable as necessary."},{"type":"text","text":" "},{"type":"text","text":"See also ControlButton2 that supports Shape based backgrounds."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ControlButton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ControlButton"}],"url":"\/documentation\/c3\/controlbutton"},"doc://com.davidbjames.C3/documentation/C3/Backdrop":{"role":"symbol","title":"Backdrop","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Backdrop"}],"abstract":[{"type":"text","text":"Backdrop is a view that is stretched to fill the parent."},{"type":"text","text":" "},{"type":"text","text":"How it is styled is up to the implementor."},{"type":"text","text":" "},{"type":"text","text":"See also C3.Defaults.backdropShade which supports a"},{"type":"text","text":" "},{"type":"text","text":"default backdrop shade."},{"type":"text","text":" "},{"type":"text","text":"Technically it’s a button which is initially disabled"},{"type":"text","text":" "},{"type":"text","text":"from user interaction, unless you choose to allow"},{"type":"text","text":" "},{"type":"text","text":"interaction via BackdropDelegate (for example if"},{"type":"text","text":" "},{"type":"text","text":"tapping is to be used to dismiss something)."},{"type":"text","text":" "},{"type":"text","text":"This is publicly creatable but private for editing."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Backdrop","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Backdrop"}],"url":"\/documentation\/c3\/backdrop"},"doc://com.davidbjames.C3/documentation/C3/ExclusiveButton":{"role":"symbol","title":"ExclusiveButton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExclusiveButton"}],"abstract":[{"type":"text","text":"Exclusive buttons support exclusive selection state"},{"type":"text","text":" "},{"type":"text","text":"within a group of sibling Exclusive buttons."},{"type":"text","text":" "},{"type":"text","text":"(Similar to a “radio group” in web programming,"},{"type":"text","text":" "},{"type":"text","text":"and functionally similar to UISegmentedControl.)"},{"type":"text","text":" "},{"type":"text","text":"To ensure independent handling of separate groups"},{"type":"text","text":" "},{"type":"text","text":"make sure each group is within it’s own parent view"},{"type":"text","text":" "},{"type":"text","text":"or, at a minimum, layout guide."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExclusiveButton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExclusiveButton"}],"url":"\/documentation\/c3\/exclusivebutton"},"doc://com.davidbjames.C3/documentation/C3/SwitchableButton":{"role":"symbol","title":"SwitchableButton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchableButton"}],"abstract":[{"type":"text","text":"Switchable buttons support toggling the selected state"},{"type":"text","text":" "},{"type":"text","text":"of the button. Check selected state via “isSelected”."},{"type":"text","text":" "},{"type":"text","text":"(Similar to UISwitch or a “check box” in web programming.)"}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/SwitchableButton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SwitchableButton"}],"url":"\/documentation\/c3\/switchablebutton"},"doc://com.davidbjames.C3/documentation/C3/ConfirmButton":{"role":"symbol","title":"ConfirmButton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConfirmButton"}],"abstract":[{"type":"text","text":"ConfirmButton supports firing attached actions and handles"},{"type":"text","text":" "},{"type":"text","text":"dismissing any related ancestor Presentable if initialized"},{"type":"text","text":" "},{"type":"text","text":"with “dismissive”."},{"type":"text","text":" "},{"type":"text","text":"Adhoc actions can be attached to this button or via"},{"type":"text","text":" "},{"type":"text","text":"delegate using Mutator event API."},{"type":"text","text":" "},{"type":"text","text":"This button is automatically “control state updatable”"},{"type":"text","text":" "},{"type":"text","text":"for theme changes on the button itself and potentially on a"},{"type":"text","text":" "},{"type":"text","text":"ControlBackground (layer) if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"},{"type":"text","text":" "},{"type":"text","text":"This button supports optionally constructing with data on"},{"type":"text","text":" "},{"type":"text","text":"attachment (i.e. via in(..data:) method). The data type to"},{"type":"text","text":" "},{"type":"text","text":"provide is a tuple of button text, optional button outset,"},{"type":"text","text":" "},{"type":"text","text":"and whether or not to add a control background."},{"type":"text","text":" "},{"type":"text","text":"(You may create multiple buttons this way by providing"},{"type":"text","text":" "},{"type":"text","text":"multiple data tuples as normal with ConstructibleWithData.)"},{"type":"text","text":" "},{"type":"text","text":"Passing a theme to in() is optional but preferred (the theme"},{"type":"text","text":" "},{"type":"text","text":"will be applied to the button as well as the background)."},{"type":"text","text":" "},{"type":"text","text":"The default background type is ControlBackground but you may"},{"type":"text","text":" "},{"type":"text","text":"also use a custom subclass of ControlBackground by subclassing"},{"type":"text","text":" "},{"type":"text","text":"the button class and assigning the new background type to the"},{"type":"text","text":" "},{"type":"text","text":"typealias UpdatableBackground. Example:"},{"type":"text","text":" "},{"type":"text","text":"class MyButton : ConfirmButton { typealias UpdatableBackground = MyBackground }"},{"type":"text","text":" "},{"type":"text","text":"If you pass a theme that inherits from the built-in theme"},{"type":"text","text":" "},{"type":"text","text":"(via Theme.getBuiltInTheme()) then this button and it’s"},{"type":"text","text":" "},{"type":"text","text":"background will inherit the default styling."},{"type":"text","text":" "},{"type":"text","text":"(If you want the background to receive the default styling"},{"type":"text","text":" "},{"type":"text","text":"your Theme must also statically conform to ExtendedStyleAccessible"},{"type":"text","text":" "},{"type":"text","text":"with the static property ExtendedStyleDefaults, with"},{"type":"text","text":" "},{"type":"text","text":"usesButtonBackgroundLayers set to true.)"},{"type":"text","text":" "},{"type":"text","text":"If you choose to use this initializer but do not want the"},{"type":"text","text":" "},{"type":"text","text":"background to appear at all you may either hide it manually:"},{"type":"text","text":" "},{"type":"text","text":"e.g. .with { $0.backgrounds }.hide()"},{"type":"text","text":" "},{"type":"text","text":"or create a style in your theme to hide it:"},{"type":"text","text":" "},{"type":"text","text":"e.g. MyControlButton.self > Background.self => .contentAlpha(0.0)"},{"type":"text","text":" "},{"type":"text","text":"CAVEAT: If you want to use a custom Model type (not the one"},{"type":"text","text":" "},{"type":"text","text":"that is already on ControlButton) you cannot use this class due to"},{"type":"text","text":" "},{"type":"text","text":"generics limitations. Use DismissableButton or Button instead with"},{"type":"text","text":" "},{"type":"text","text":"ControlStateCombinedUpdatable as necessary."},{"type":"text","text":" "},{"type":"text","text":"See also CancelButton2 that supports Shape backgrounds."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ConfirmButton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ConfirmButton"}],"url":"\/documentation\/c3\/confirmbutton"},"doc://com.davidbjames.C3/documentation/C3/CustomAlignable":{"role":"symbol","title":"CustomAlignable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomAlignable"}],"abstract":[{"type":"text","text":"Any class that can tweak it’s alignment rectangle"},{"type":"text","text":" "},{"type":"text","text":"for the purpose of alignment to any of it’s edges."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CustomAlignable"}],"url":"\/documentation\/c3\/customalignable"},"doc://com.davidbjames.C3/documentation/C3/CancelButton2":{"role":"symbol","title":"CancelButton2","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancelButton2"}],"abstract":[{"type":"text","text":"CancelButton2 supports canceling and dismissing a related"},{"type":"text","text":" "},{"type":"text","text":"ancestor Presentable if initialized with “dismissive”."},{"type":"text","text":" "},{"type":"text","text":"Adhoc actions can be attached to this button or via"},{"type":"text","text":" "},{"type":"text","text":"delegate using Mutator event API."},{"type":"text","text":" "},{"type":"text","text":"This button is automatically “control state updatable” for"},{"type":"text","text":" "},{"type":"text","text":"theme changes on the button itself and potentially on a"},{"type":"text","text":" "},{"type":"text","text":"background Shape if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"},{"type":"text","text":" "},{"type":"text","text":"This button is also Dismissable if “dismissive” is passed."},{"type":"text","text":" "},{"type":"text","text":"This button supports constructing with data on attachment"},{"type":"text","text":" "},{"type":"text","text":"(i.e. via in(..data:) method). The data type to provide"},{"type":"text","text":" "},{"type":"text","text":"is a tuple of button text, optional button outset,"},{"type":"text","text":" "},{"type":"text","text":"and optional corner spec. Using this approach will cause a"},{"type":"text","text":" "},{"type":"text","text":"rectangular shape background (that is also control state"},{"type":"text","text":" "},{"type":"text","text":"updatable) to be added. (The rectangle will obtain corner"},{"type":"text","text":" "},{"type":"text","text":"spec if provided.) Passing a theme to in() is optional"},{"type":"text","text":" "},{"type":"text","text":"but preferred (the theme will be applied to the button"},{"type":"text","text":" "},{"type":"text","text":"as well as the shape)."},{"type":"text","text":" "},{"type":"text","text":"(You may create multiple buttons this way by providing"},{"type":"text","text":" "},{"type":"text","text":"multiple data tuples as per normal with ConstructibleWithData.)"},{"type":"text","text":" "},{"type":"text","text":"If you prefer to use your own custom shape for this button"},{"type":"text","text":" "},{"type":"text","text":"then do not use the construct-with-data approach or alternatively,"},{"type":"text","text":" "},{"type":"text","text":"override the construct(data:) method. But keep in mind that"},{"type":"text","text":" "},{"type":"text","text":"your custom shape should pass “updatable:true” to ensure"},{"type":"text","text":" "},{"type":"text","text":"it can participate in control state updates."},{"type":"text","text":" "},{"type":"text","text":"If you pass a theme that inherits from the built-in theme"},{"type":"text","text":" "},{"type":"text","text":"(via Theme.getBuiltInTheme()) then this button and it’s"},{"type":"text","text":" "},{"type":"text","text":"background will inherit the default styling."},{"type":"text","text":" "},{"type":"text","text":"(If you want the background to receive the default styling"},{"type":"text","text":" "},{"type":"text","text":"your Theme must also statically conform to ExtendedStyleAccessible"},{"type":"text","text":" "},{"type":"text","text":"with the static property ExtendedStyleDefaults, with"},{"type":"text","text":" "},{"type":"text","text":"usesButtonBackgroundLayers set to true.)"},{"type":"text","text":" "},{"type":"text","text":"If you choose to use this initializer but do not want the"},{"type":"text","text":" "},{"type":"text","text":"background to appear at all you may either hide it manually:"},{"type":"text","text":" "},{"type":"text","text":"e.g. .with { $0.shapes }.hide()"},{"type":"text","text":" "},{"type":"text","text":"or create a style in your theme to hide it:"},{"type":"text","text":" "},{"type":"text","text":"e.g. MyCancelButton.self > Shape.self => .contentAlpha(0.0)"},{"type":"text","text":" "},{"type":"text","text":"CAVEAT: If you want to use a custom Model type (not the one"},{"type":"text","text":" "},{"type":"text","text":"that is already on ControlButton2) you cannot use this class due to"},{"type":"text","text":" "},{"type":"text","text":"generics limitations. Use DismissableButton or Button instead with"},{"type":"text","text":" "},{"type":"text","text":"ControlStateCombinedUpdatable as necessary. You will also"},{"type":"text","text":" "},{"type":"text","text":"probably want to conform to DismissableButtonConfigurable"},{"type":"text","text":" "},{"type":"text","text":"to get the tap action to dismiss."},{"type":"text","text":" "},{"type":"text","text":"See also CancelButton that supports regular layer backgrounds."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CancelButton2","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CancelButton2"}],"url":"\/documentation\/c3\/cancelbutton2"},"doc://com.davidbjames.C3/documentation/C3/ControlButton2":{"role":"symbol","title":"ControlButton2","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ControlButton2"}],"abstract":[{"type":"text","text":"ControlButton2 is kind of button that is automatically"},{"type":"text","text":" "},{"type":"text","text":"“control state updatable” for theme changes on the button"},{"type":"text","text":" "},{"type":"text","text":"itself and potentially on a background Shape if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"},{"type":"text","text":" "},{"type":"text","text":"This button is also Dismissable if “dismissive” is passed."},{"type":"text","text":" "},{"type":"text","text":"This button supports constructing with data on attachment"},{"type":"text","text":" "},{"type":"text","text":"(i.e. via in(..data:) method). The data type to provide"},{"type":"text","text":" "},{"type":"text","text":"is a tuple of button text, optional button outset,"},{"type":"text","text":" "},{"type":"text","text":"and optional corner spec. Using this approach will cause a"},{"type":"text","text":" "},{"type":"text","text":"rectangular shape background (that is also control state"},{"type":"text","text":" "},{"type":"text","text":"updatable) to be added. (The rectangle will obtain corner"},{"type":"text","text":" "},{"type":"text","text":"spec if provided.) Passing a theme to in() is optional"},{"type":"text","text":" "},{"type":"text","text":"but preferred (the theme will be applied to the button"},{"type":"text","text":" "},{"type":"text","text":"as well as the shape)."},{"type":"text","text":" "},{"type":"text","text":"(You may create multiple buttons this way by providing"},{"type":"text","text":" "},{"type":"text","text":"multiple data tuples as per normal with ConstructibleWithData.)"},{"type":"text","text":" "},{"type":"text","text":"If you prefer to use your own custom shape for this button"},{"type":"text","text":" "},{"type":"text","text":"then do not use the construct-with-data approach or alternatively,"},{"type":"text","text":" "},{"type":"text","text":"override the construct(data:) method. But keep in mind that"},{"type":"text","text":" "},{"type":"text","text":"your custom shape should pass “updatable:true” to ensure"},{"type":"text","text":" "},{"type":"text","text":"it can participate in control state updates."},{"type":"text","text":" "},{"type":"text","text":"If you pass a theme that inherits from the built-in theme"},{"type":"text","text":" "},{"type":"text","text":"(via Theme.getBuiltInTheme()) then this button and it’s"},{"type":"text","text":" "},{"type":"text","text":"background will inherit the default styling."},{"type":"text","text":" "},{"type":"text","text":"(If you want the background to receive the default styling"},{"type":"text","text":" "},{"type":"text","text":"your Theme must also statically conform to ExtendedStyleAccessible"},{"type":"text","text":" "},{"type":"text","text":"with the static property ExtendedStyleDefaults, with"},{"type":"text","text":" "},{"type":"text","text":"usesButtonBackgroundLayers set to true.)"},{"type":"text","text":" "},{"type":"text","text":"If you choose to use this initializer but do not want the"},{"type":"text","text":" "},{"type":"text","text":"background to appear at all you may either hide it manually:"},{"type":"text","text":" "},{"type":"text","text":"e.g. .with { $0.shapes }.hide()"},{"type":"text","text":" "},{"type":"text","text":"or create a style in your theme to hide it:"},{"type":"text","text":" "},{"type":"text","text":"e.g. MyControlButton.self > Shape.self => .contentAlpha(0.0)"},{"type":"text","text":" "},{"type":"text","text":"CAVEAT: If you want to use a custom Model type (not the one"},{"type":"text","text":" "},{"type":"text","text":"that is already on ControlButton2) you cannot use this class due to"},{"type":"text","text":" "},{"type":"text","text":"generics limitations. Use DismissableButton or Button instead with"},{"type":"text","text":" "},{"type":"text","text":"ControlStateCombinedUpdatable as necessary."},{"type":"text","text":" "},{"type":"text","text":"See also ControlButton that supports regular layer backgrounds."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ControlButton2","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ControlButton2"}],"url":"\/documentation\/c3\/controlbutton2"},"doc://com.davidbjames.C3/documentation/C3/Button":{"role":"symbol","title":"Button","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Button"}],"abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Button","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Button"}],"url":"\/documentation\/c3\/button"},"doc://com.davidbjames.C3/documentation/C3/CustomAlignable/customAlignmentRectInsets-2xmxs":{"defaultImplementations":1,"role":"symbol","title":"customAlignmentRectInsets","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"customAlignmentRectInsets"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UIEdgeInsets","preciseIdentifier":"c:@S@UIEdgeInsets"}],"abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable\/customAlignmentRectInsets-2xmxs","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/c3\/customalignable\/customalignmentrectinsets-2xmxs"},"doc://com.davidbjames.C3/documentation/C3/DisplayText":{"role":"symbol","title":"DisplayText","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DisplayText"}],"abstract":[{"type":"text","text":"Text view configured for static text display."},{"type":"text","text":" "},{"type":"text","text":"Text views default to fill available space within the parent."},{"type":"text","text":" "},{"type":"text","text":"See also EditableText."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/DisplayText","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DisplayText"}],"url":"\/documentation\/c3\/displaytext"},"doc://com.davidbjames.C3/documentation/C3/SwitchableControllButton2":{"role":"symbol","title":"SwitchableControllButton2","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchableControllButton2"}],"abstract":[{"type":"text","text":"Switchable buttons support toggling the selected state"},{"type":"text","text":" "},{"type":"text","text":"of the button. Check selected state via “isSelected”."},{"type":"text","text":" "},{"type":"text","text":"(Similar to UISwitch or a “check box” in web programming.)"},{"type":"text","text":" "},{"type":"text","text":"SwitchableControlButton2 is automatically “control state"},{"type":"text","text":" "},{"type":"text","text":"updatable” for theme changes on the button itself and"},{"type":"text","text":" "},{"type":"text","text":"potentially on a background Shape if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/SwitchableControllButton2","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SwitchableControllButton2"}],"url":"\/documentation\/c3\/switchablecontrollbutton2"},"doc://com.davidbjames.C3/documentation/C3/ExclusiveControlButton2":{"role":"symbol","title":"ExclusiveControlButton2","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExclusiveControlButton2"}],"abstract":[{"type":"text","text":"Exclusive buttons support exclusive selection state"},{"type":"text","text":" "},{"type":"text","text":"within a group of sibling Exclusive buttons."},{"type":"text","text":" "},{"type":"text","text":"(Similar to a “radio group” in web programming,"},{"type":"text","text":" "},{"type":"text","text":"and functionally similar to UISegmentedControl.)"},{"type":"text","text":" "},{"type":"text","text":"ExclusiveControlButton2 is automatically “control state"},{"type":"text","text":" "},{"type":"text","text":"updatable” for theme changes on the button itself and"},{"type":"text","text":" "},{"type":"text","text":"potentially on a background Shape if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExclusiveControlButton2","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExclusiveControlButton2"}],"url":"\/documentation\/c3\/exclusivecontrolbutton2"},"doc://com.davidbjames.C3/documentation/C3/SwitchableControlButton":{"role":"symbol","title":"SwitchableControlButton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchableControlButton"}],"abstract":[{"type":"text","text":"Switchable buttons support toggling the selected state"},{"type":"text","text":" "},{"type":"text","text":"of the button. Check selected state via “isSelected”."},{"type":"text","text":" "},{"type":"text","text":"(Similar to UISwitch or a “check box” in web programming.)"},{"type":"text","text":" "},{"type":"text","text":"SwitchableControlButton is automatically “control state"},{"type":"text","text":" "},{"type":"text","text":"updatable” for theme changes on the button itself and"},{"type":"text","text":" "},{"type":"text","text":"potentially on a ControlBackground (layer) if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/SwitchableControlButton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SwitchableControlButton"}],"url":"\/documentation\/c3\/switchablecontrolbutton"},"doc://com.davidbjames.C3/documentation/C3/CustomAlignable/deactivate(_:)":{"role":"symbol","title":"deactivate(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"deactivate"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"LayoutAttribute","preciseIdentifier":"s:2C315LayoutAttributeO"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Deactivate a custom alignable attribute"},{"type":"text","text":" "},{"type":"text","text":"by resetting the object’s alignment rectangle"},{"type":"text","text":" "},{"type":"text","text":"on the appropriate side for the attribute."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable\/deactivate(_:)","kind":"symbol","type":"topic","url":"\/documentation\/c3\/customalignable\/deactivate(_:)"},"doc://com.davidbjames.C3/documentation/C3/TextLayer":{"role":"symbol","title":"TextLayer","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TextLayer"}],"abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/TextLayer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TextLayer"}],"url":"\/documentation\/c3\/textlayer"},"doc://com.davidbjames.C3/documentation/C3/CustomAlignable/alignmentOptions":{"role":"symbol","title":"alignmentOptions","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"alignmentOptions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AlignmentOptions","preciseIdentifier":"s:2C316AlignmentOptionsV"}],"abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable\/alignmentOptions","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/c3\/customalignable\/alignmentoptions"},"doc://com.davidbjames.C3/documentation/C3/Label":{"role":"symbol","title":"Label","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Label"}],"abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Label","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Label"}],"url":"\/documentation\/c3\/label"},"doc://com.davidbjames.C3/documentation/C3/DismissableButton":{"role":"symbol","title":"DismissableButton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DismissableButton"}],"abstract":[{"type":"text","text":"DismissableButton is a button that can indirectly control"},{"type":"text","text":" "},{"type":"text","text":"whether or not Presentable ancestor items dismiss (including"},{"type":"text","text":" "},{"type":"text","text":"firing related actions)."},{"type":"text","text":" "},{"type":"text","text":"Specify “dismissive” on initialization to get this behavior."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/DismissableButton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DismissableButton"}],"url":"\/documentation\/c3\/dismissablebutton"},"doc://com.davidbjames.C3/documentation/C3/TextField":{"role":"symbol","title":"TextField","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TextField"}],"abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/TextField","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TextField"}],"url":"\/documentation\/c3\/textfield"},"doc://com.davidbjames.C3/documentation/C3/ExclusiveControlButton":{"role":"symbol","title":"ExclusiveControlButton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExclusiveControlButton"}],"abstract":[{"type":"text","text":"Exclusive buttons support exclusive selection state"},{"type":"text","text":" "},{"type":"text","text":"within a group of sibling Exclusive buttons."},{"type":"text","text":" "},{"type":"text","text":"(Similar to a “radio group” in web programming,"},{"type":"text","text":" "},{"type":"text","text":"and functionally similar to UISegmentedControl.)"},{"type":"text","text":" "},{"type":"text","text":"ExclusiveControlButton is automatically “control state"},{"type":"text","text":" "},{"type":"text","text":"updatable” for theme changes on the button itself and"},{"type":"text","text":" "},{"type":"text","text":"potentially on a ControlBackground (layer) if it exists."},{"type":"text","text":" "},{"type":"text","text":"(This also presumes the button or super type (e.g. UIView)"},{"type":"text","text":" "},{"type":"text","text":"conforms to ThemeAccessible or ThemeOverridable.)"}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExclusiveControlButton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExclusiveControlButton"}],"url":"\/documentation\/c3\/exclusivecontrolbutton"},"doc://com.davidbjames.C3/documentation/C3/CustomAlignable/activate(_:)":{"role":"symbol","title":"activate(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"activate"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"LayoutAttribute","preciseIdentifier":"s:2C315LayoutAttributeO"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Activate a custom alignable attribute"},{"type":"text","text":" "},{"type":"text","text":"by altering the object’s alignment rectangle"},{"type":"text","text":" "},{"type":"text","text":"on the appropriate side for the attribute."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CustomAlignable\/activate(_:)","kind":"symbol","type":"topic","url":"\/documentation\/c3\/customalignable\/activate(_:)"},"doc://com.davidbjames.C3/documentation/C3/TextMask":{"role":"symbol","title":"TextMask","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TextMask"}],"abstract":[{"type":"text","text":"Text mask for masks based on arbitrary text."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/TextMask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TextMask"}],"url":"\/documentation\/c3\/textmask"}}}