{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"+?"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"internalParam","text":"left"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:12CoreGraphics7CGFloatV"},{"kind":"text","text":"?, "},{"kind":"internalParam","text":"right"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:12CoreGraphics7CGFloatV"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:12CoreGraphics7CGFloatV"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/c3\/+_(_:_:)-2t32h"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/+_(_:_:)-2t32h","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Add two optional floats. If the left value is non-nil"},{"type":"text","text":" "},{"type":"text","text":"will return that value or that value + right value,"},{"type":"text","text":" "},{"type":"text","text":"else nil. This operator does not treat left and right"},{"type":"text","text":" "},{"type":"text","text":"sides equally as does a traditional binary +. Left"},{"type":"text","text":" "},{"type":"text","text":"side "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" be non-nil in order to return non-nil."},{"type":"text","text":" "},{"type":"text","text":"i.e. if left is nil, right value is ignored."},{"type":"text","text":" "},{"type":"text","text":"l   +? r   = l + r"},{"type":"text","text":" "},{"type":"text","text":"l   +? nil = l"},{"type":"text","text":" "},{"type":"text","text":"nil +? r   = nil"},{"type":"text","text":" "},{"type":"text","text":"^ (not right value because we don’t assume left is 0.0)"},{"type":"text","text":" "},{"type":"text","text":"nil + nil  = nil (not 0.0)"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"+?"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:12CoreGraphics7CGFloatV"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:12CoreGraphics7CGFloatV"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:12CoreGraphics7CGFloatV"},{"kind":"text","text":"?"}],"title":"+?(_:_:)","roleHeading":"Operator","role":"symbol","symbolKind":"op","externalID":"s:2C32pqoiy12CoreGraphics7CGFloatVSgAF_AFtF","modules":[{"name":"C3"}]},"hierarchy":{"paths":[["doc:\/\/com.davidbjames.C3\/documentation\/C3"]]},"references":{"doc://com.davidbjames.C3/documentation/C3/+_(_:_:)-2t32h":{"role":"symbol","title":"+?(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"+?"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:12CoreGraphics7CGFloatV"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:12CoreGraphics7CGFloatV"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"CGFloat","preciseIdentifier":"s:12CoreGraphics7CGFloatV"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Add two optional floats. If the left value is non-nil"},{"type":"text","text":" "},{"type":"text","text":"will return that value or that value + right value,"},{"type":"text","text":" "},{"type":"text","text":"else nil. This operator does not treat left and right"},{"type":"text","text":" "},{"type":"text","text":"sides equally as does a traditional binary +. Left"},{"type":"text","text":" "},{"type":"text","text":"side "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" be non-nil in order to return non-nil."},{"type":"text","text":" "},{"type":"text","text":"i.e. if left is nil, right value is ignored."},{"type":"text","text":" "},{"type":"text","text":"l   +? r   = l + r"},{"type":"text","text":" "},{"type":"text","text":"l   +? nil = l"},{"type":"text","text":" "},{"type":"text","text":"nil +? r   = nil"},{"type":"text","text":" "},{"type":"text","text":"^ (not right value because we don’t assume left is 0.0)"},{"type":"text","text":" "},{"type":"text","text":"nil + nil  = nil (not 0.0)"}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/+_(_:_:)-2t32h","kind":"symbol","type":"topic","url":"\/documentation\/c3\/+_(_:_:)-2t32h"},"doc://com.davidbjames.C3/documentation/C3":{"role":"collection","title":"C3","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3","kind":"symbol","type":"topic","url":"\/documentation\/c3"}}}