{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CellAdvancer"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/c3\/celladvancer"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/com.davidbjames.C3\/s27ExpressibleByBooleanLiteralP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Wrapper for grid\/cell iteration return value."},{"type":"text","text":" "},{"type":"text","text":"Use this return value to control whether the"},{"type":"text","text":" "},{"type":"text","text":"iteration should "},{"type":"codeVoice","code":"continue"},{"type":"text","text":", "},{"type":"codeVoice","code":"stop"},{"type":"text","text":", "},{"type":"codeVoice","code":"skipPositions"},{"type":"text","text":" "},{"type":"text","text":"or go "},{"type":"codeVoice","code":"toPosition"},{"type":"text","text":". The skip and to position values"},{"type":"text","text":" "},{"type":"text","text":"relate to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"position"}]},{"type":"text","text":" in the grid and not to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"index"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To simply continue or stop, you may also just"},{"type":"text","text":" "},{"type":"text","text":"return true or false, respectively (this enum"},{"type":"text","text":" "},{"type":"text","text":"conforms to “expressible by boolean” syntax)."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CellAdvancer"}],"title":"CellAdvancer","roleHeading":"Enumeration","role":"symbol","symbolKind":"enum","externalID":"s:2C312CellAdvancerO","modules":[{"name":"C3"}],"navigatorTitle":[{"kind":"identifier","text":"CellAdvancer"}]},"hierarchy":{"paths":[["doc:\/\/com.davidbjames.C3\/documentation\/C3"]]},"topicSections":[{"title":"Enumeration Cases","identifiers":["doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/continue","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/skipPositions(_:)","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/stop","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/toPosition(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/ExpressibleByBooleanLiteral-Implementations"],"generated":true}],"references":{"doc://com.davidbjames.C3/documentation/C3/CellAdvancer/toPosition(_:)":{"role":"symbol","title":"CellAdvancer.toPosition(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"toPosition"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Skip cols\/rows up to but not including "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/toPosition(_:)","kind":"symbol","type":"topic","url":"\/documentation\/c3\/celladvancer\/toposition(_:)"},"doc://com.davidbjames.C3/documentation/C3/CellAdvancer/continue":{"role":"symbol","title":"CellAdvancer.continue","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"`continue`"}],"abstract":[{"type":"text","text":"Continue cell iteration."},{"type":"text","text":" "},{"type":"text","text":"Alternatively return "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/continue","kind":"symbol","type":"topic","url":"\/documentation\/c3\/celladvancer\/continue"},"doc://com.davidbjames.C3/documentation/C3":{"role":"collection","title":"C3","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3","kind":"symbol","type":"topic","url":"\/documentation\/c3"},"doc://com.davidbjames.C3/documentation/C3/CellAdvancer/skipPositions(_:)":{"role":"symbol","title":"CellAdvancer.skipPositions(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"skipPositions"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Skip "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" cols\/rows."},{"type":"text","text":" "},{"type":"text","text":"This can also be used to create alternating"},{"type":"text","text":" "},{"type":"text","text":"col\/row patterns."},{"type":"text","text":" "},{"type":"text","text":"For example, returning .skipPositions(1) will skip"},{"type":"text","text":" "},{"type":"text","text":"every other cols\/rows. Other uses could cause the"},{"type":"text","text":" "},{"type":"text","text":"cells to be stacked or diagonally distributed, etc."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/skipPositions(_:)","kind":"symbol","type":"topic","url":"\/documentation\/c3\/celladvancer\/skippositions(_:)"},"doc://com.davidbjames.C3/documentation/C3/CellAdvancer":{"role":"symbol","title":"CellAdvancer","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CellAdvancer"}],"abstract":[{"type":"text","text":"Wrapper for grid\/cell iteration return value."},{"type":"text","text":" "},{"type":"text","text":"Use this return value to control whether the"},{"type":"text","text":" "},{"type":"text","text":"iteration should "},{"type":"codeVoice","code":"continue"},{"type":"text","text":", "},{"type":"codeVoice","code":"stop"},{"type":"text","text":", "},{"type":"codeVoice","code":"skipPositions"},{"type":"text","text":" "},{"type":"text","text":"or go "},{"type":"codeVoice","code":"toPosition"},{"type":"text","text":". The skip and to position values"},{"type":"text","text":" "},{"type":"text","text":"relate to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"position"}]},{"type":"text","text":" in the grid and not to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"index"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To simply continue or stop, you may also just"},{"type":"text","text":" "},{"type":"text","text":"return true or false, respectively (this enum"},{"type":"text","text":" "},{"type":"text","text":"conforms to “expressible by boolean” syntax)."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CellAdvancer"}],"url":"\/documentation\/c3\/celladvancer"},"doc://com.davidbjames.C3/documentation/C3/CellAdvancer/stop":{"role":"symbol","title":"CellAdvancer.stop","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"stop"}],"abstract":[{"type":"text","text":"Stop cell iteration."},{"type":"text","text":" "},{"type":"text","text":"Alternatively return "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/stop","kind":"symbol","type":"topic","url":"\/documentation\/c3\/celladvancer\/stop"},"doc://com.davidbjames.C3/documentation/C3/CellAdvancer/ExpressibleByBooleanLiteral-Implementations":{"role":"collectionGroup","title":"ExpressibleByBooleanLiteral Implementations","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CellAdvancer\/ExpressibleByBooleanLiteral-Implementations","kind":"article","type":"topic","url":"\/documentation\/c3\/celladvancer\/expressiblebybooleanliteral-implementations"},"doc://com.davidbjames.C3/s27ExpressibleByBooleanLiteralP":{"type":"unresolvable","title":"Swift.ExpressibleByBooleanLiteral","identifier":"doc:\/\/com.davidbjames.C3\/s27ExpressibleByBooleanLiteralP"}}}