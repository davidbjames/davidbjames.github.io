{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getBuiltInTheme"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Theme","preciseIdentifier":"s:2C35ThemeV","text":"Theme"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"codeListing","syntax":null,"code":["extension Theme : ExtendedStyleAccessible {","    public static var colors = MyColors()","    public static var fonts = MyFonts()","    public static var defaults = MyStyleDefaults()","","    \/\/ 1. Store private built-in theme ensuring it is","    \/\/    computed once only.","    private static var builtinTheme = getBuiltInTheme()","","    \/\/ 2. Create private theme methods that use the","    \/\/    stored \"builtinTheme\" value.","    \/\/    (Use func vs var to communicate \"computed\"","    \/\/    and to support SwiftUI previews.)","    private static func getTheme1() -> Theme {","        builtinTheme + [ ... ]","        \/\/ NOTES:","        \/\/ - colors, fonts and defaults are available in scope","        \/\/ - editable with live previews","    }","    private static func getTheme2() -> Theme {","        builtinTheme + [ ... ]","    }","","    \/\/ 3. Expose themes to the app, ensuring they are","    \/\/    computed once only via the private methods.","    internal static var theme1:Theme = getTheme1()","    internal static var theme2:Theme = getTheme2()","}"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/c3\/extendedstyleaccessible\/getbuiltintheme()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExtendedStyleAccessible\/getBuiltInTheme()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Assuming palette, font set and style defaults have been provided"},{"type":"text","text":" "},{"type":"text","text":"via Theme conformance to ExtendedStyleAccessible, get the default"},{"type":"text","text":" "},{"type":"text","text":"Theme using those values appropriately."},{"type":"text","text":" "},{"type":"text","text":"This method would probably be followed by “.enhance()” (or “+”) which"},{"type":"text","text":" "},{"type":"text","text":"contains the app-specific styles, overriding these styles as needed."},{"type":"text","text":" "},{"type":"text","text":"WARNING: Using this theme to enhance "},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiple"}]},{"type":"text","text":" app themes causes this"},{"type":"text","text":" "},{"type":"text","text":"(fairly complex) theme to be parsed multiple times, which is a"},{"type":"text","text":" "},{"type":"text","text":"performance concern. If this is the case (i.e. enhancing multiple"},{"type":"text","text":" "},{"type":"text","text":"themes) then you should first store this theme separately (e.g. via"},{"type":"text","text":" "},{"type":"text","text":"assignment on an extension of Theme) and use that storage for enhancing"},{"type":"text","text":" "},{"type":"text","text":"each of your app themes, which ensures it is only computed once."},{"type":"text","text":" "},{"type":"text","text":"(Even if you’re not using multiple themes now, it’s recommended"},{"type":"text","text":" "},{"type":"text","text":"to store the built-in theme anyways to ensure future new themes"},{"type":"text","text":" "},{"type":"text","text":"don’t suddenly cause mysterious performance problems.)"},{"type":"text","text":" "},{"type":"text","text":"To further ensure that your own themes are computed only once"},{"type":"text","text":" "},{"type":"text","text":"follow the same storage pattern (as seen in the following example)."},{"type":"text","text":" "},{"type":"text","text":"This approach will also support "},{"type":"emphasis","inlineContent":[{"type":"text","text":"live"}]},{"type":"text","text":" Xcode previews, for example if"},{"type":"text","text":" "},{"type":"text","text":"creating a C3UI hierarchy within a SwiftUI view."},{"type":"text","text":" "},{"type":"text","text":"Example:"}],"kind":"symbol","metadata":{"role":"symbol","title":"getBuiltInTheme()","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getBuiltInTheme"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Theme","preciseIdentifier":"s:2C35ThemeV"}],"symbolKind":"method","externalID":"s:2C323ExtendedStyleAccessiblePAAE15getBuiltInThemeAA0H0VyFZ","extendedModule":"C3","modules":[{"name":"C3"}]},"hierarchy":{"paths":[["doc:\/\/com.davidbjames.C3\/documentation\/C3","doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExtendedStyleAccessible"]]},"references":{"doc://com.davidbjames.C3/documentation/C3/ExtendedStyleAccessible/getBuiltInTheme()":{"role":"symbol","title":"getBuiltInTheme()","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getBuiltInTheme"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Theme","preciseIdentifier":"s:2C35ThemeV"}],"abstract":[{"type":"text","text":"Assuming palette, font set and style defaults have been provided"},{"type":"text","text":" "},{"type":"text","text":"via Theme conformance to ExtendedStyleAccessible, get the default"},{"type":"text","text":" "},{"type":"text","text":"Theme using those values appropriately."},{"type":"text","text":" "},{"type":"text","text":"This method would probably be followed by “.enhance()” (or “+”) which"},{"type":"text","text":" "},{"type":"text","text":"contains the app-specific styles, overriding these styles as needed."},{"type":"text","text":" "},{"type":"text","text":"WARNING: Using this theme to enhance "},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiple"}]},{"type":"text","text":" app themes causes this"},{"type":"text","text":" "},{"type":"text","text":"(fairly complex) theme to be parsed multiple times, which is a"},{"type":"text","text":" "},{"type":"text","text":"performance concern. If this is the case (i.e. enhancing multiple"},{"type":"text","text":" "},{"type":"text","text":"themes) then you should first store this theme separately (e.g. via"},{"type":"text","text":" "},{"type":"text","text":"assignment on an extension of Theme) and use that storage for enhancing"},{"type":"text","text":" "},{"type":"text","text":"each of your app themes, which ensures it is only computed once."},{"type":"text","text":" "},{"type":"text","text":"(Even if you’re not using multiple themes now, it’s recommended"},{"type":"text","text":" "},{"type":"text","text":"to store the built-in theme anyways to ensure future new themes"},{"type":"text","text":" "},{"type":"text","text":"don’t suddenly cause mysterious performance problems.)"},{"type":"text","text":" "},{"type":"text","text":"To further ensure that your own themes are computed only once"},{"type":"text","text":" "},{"type":"text","text":"follow the same storage pattern (as seen in the following example)."},{"type":"text","text":" "},{"type":"text","text":"This approach will also support "},{"type":"emphasis","inlineContent":[{"type":"text","text":"live"}]},{"type":"text","text":" Xcode previews, for example if"},{"type":"text","text":" "},{"type":"text","text":"creating a C3UI hierarchy within a SwiftUI view."},{"type":"text","text":" "},{"type":"text","text":"Example:"}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExtendedStyleAccessible\/getBuiltInTheme()","kind":"symbol","type":"topic","url":"\/documentation\/c3\/extendedstyleaccessible\/getbuiltintheme()"},"doc://com.davidbjames.C3/documentation/C3/ExtendedStyleAccessible":{"role":"symbol","title":"ExtendedStyleAccessible","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExtendedStyleAccessible"}],"abstract":[{"type":"text","text":"Protocol to support style access and built-in themes."},{"type":"text","text":" "},{"type":"text","text":"Conform the “Theme” type (or other wrapper)"},{"type":"text","text":" "},{"type":"text","text":"to this protocol to access the necessary color,"},{"type":"text","text":" "},{"type":"text","text":"font and other style information used throughout"},{"type":"text","text":" "},{"type":"text","text":"the app and\/or to generate the built-in theme."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/ExtendedStyleAccessible","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExtendedStyleAccessible"}],"url":"\/documentation\/c3\/extendedstyleaccessible"},"doc://com.davidbjames.C3/documentation/C3":{"role":"collection","title":"C3","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3","kind":"symbol","type":"topic","url":"\/documentation\/c3"},"doc://com.davidbjames.C3/documentation/C3/Theme":{"role":"symbol","title":"Theme","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Theme"}],"abstract":[{"type":"text","text":"A Theme is a collection of Styles that are"},{"type":"text","text":" "},{"type":"text","text":"tied to ids, tags or types represented via"},{"type":"text","text":" "},{"type":"text","text":"simple or complex Selectors. Each style contains"},{"type":"text","text":" "},{"type":"text","text":"a collection of StyleAttributes which can be"},{"type":"text","text":" "},{"type":"text","text":"applied to objects capable of receiving them."},{"type":"text","text":" "},{"type":"text","text":"Styles are similar to CSS for the web, in that"},{"type":"text","text":" "},{"type":"text","text":"they cascade in specificity with Styles specified"},{"type":"text","text":" "},{"type":"text","text":"later overriding previously applied styles."},{"type":"text","text":" "},{"type":"text","text":"The cascade is also grouped by creational styles,"},{"type":"text","text":" "},{"type":"text","text":"normal styles and control state styles, in that"},{"type":"text","text":" "},{"type":"text","text":"order of specificity."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Theme","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Theme"}],"url":"\/documentation\/c3\/theme"}}}