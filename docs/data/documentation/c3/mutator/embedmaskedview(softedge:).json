{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"embedMaskedView"},{"kind":"text","text":"("},{"kind":"externalParam","text":"softEdge"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" = false) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Mutator","preciseIdentifier":"s:2C37MutatorV","text":"Mutator"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"B","preciseIdentifier":"s:2C37MutatorVA2A14DebuggableItemR_AA11DecoratableR_AA23FreeLayoutConstrainableR_AA19MatrixTransformableR_AA11QueryDirectR_rlE1Bxmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/LiveView","preciseIdentifier":"c:@M@C3@objc(cs)LiveView","text":"LiveView"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"an embedded view "},{"type":"strong","inlineContent":[{"type":"text","text":"EmbedView"}]},{"type":"text","text":" which will become the"},{"type":"text","text":" "},{"type":"text","text":"parent(s) of the original item(s) and normally used for"},{"type":"text","text":" "},{"type":"text","text":"positioning the entire hierarchy;"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the original item(s) which will become the “background”;"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a masking view "},{"type":"strong","inlineContent":[{"type":"text","text":"MaskView"}]},{"type":"text","text":" which will mask to the rectangle"},{"type":"text","text":" "},{"type":"text","text":"or shape or text of the original item(s) as the case may be;"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a live content view "},{"type":"strong","inlineContent":[{"type":"text","text":"LiveView"}]},{"type":"text","text":" to which can be applied any"},{"type":"text","text":" "},{"type":"text","text":"mutation, transformation or decoration that will be masked"},{"type":"text","text":" "},{"type":"text","text":"within the parent MaskView; and finally,"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a front item "},{"type":"strong","inlineContent":[{"type":"text","text":"FrontView, FrontLayer, FrontShape or FrontTextLayer"}]},{"type":"text","text":" "},{"type":"text","text":"which is a copy of the original item and can be applied foreground"},{"type":"text","text":" "},{"type":"text","text":"elements such as borders, etc. The foreground color (or text color"},{"type":"text","text":" "},{"type":"text","text":"if this is a text layer) of the front type is set initially to"},{"type":"text","text":" "},{"type":"text","text":"alpha 0.0 which can be changed as needed."}]}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this method to easily create adhoc mask hierarchies with"},{"type":"text","text":" "},{"type":"text","text":"a “live” view that can be animated or moved within a masked"},{"type":"text","text":" "},{"type":"text","text":"area without interfering with the mask\/properties on the"},{"type":"text","text":" "},{"type":"text","text":"original item(s). Example: visualization: https:\/\/a.cl.ly\/JruLY7OZ"},{"type":"text","text":" "},{"type":"text","text":"code: https:\/\/a.cl.ly\/L1uplk6O"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"This method returns a Mutator of LiveViews for further"},{"type":"text","text":" "},{"type":"text","text":"mutation\/animation."}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To access the other parts of the hierarchy from the LiveView(s)"},{"type":"text","text":" "},{"type":"text","text":"use one of the following queries:"}]}]}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"EmbedView:      .parent(EmbedView.self)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Original items: .previous(“View”.self)"},{"type":"text","text":" "},{"type":"text","text":"(Replace “View” with the type of the original item.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MaskView:       .parent(MaskView.self)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"LiveView"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Front items:    .previous(“FrontView”.self)"},{"type":"text","text":" "},{"type":"text","text":"(Replace “FrontView” with FrontLayer, FrontShape"},{"type":"text","text":" "},{"type":"text","text":"or FrontTextLayer as appropriate.)"}]}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"COMMENTARY: Using an embedded parent view ensures the entire hierarchy"},{"type":"text","text":" "},{"type":"text","text":"is contained within a single View hierarchy even if it’s contents might"},{"type":"text","text":" "},{"type":"text","text":"be layers (Shapes, TextLayers, etc). For one example, this makes it"},{"type":"text","text":" "},{"type":"text","text":"possible to use spring animations or custom timing curves on"},{"type":"text","text":" "},{"type":"text","text":"the live view while the masking occurs on the stationary items"},{"type":"text","text":" "},{"type":"text","text":"(layer\/shapes\/text) as appropriate."}]}]}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The embedded parent view (EmbedView) has user interaction"},{"type":"text","text":" "},{"type":"text","text":"disabled by default so as not to interfere with parent events"},{"type":"text","text":" "},{"type":"text","text":"(i.e. events pass through). (This can be reenabled.)"}]}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If there are multiple items to be masked, each EmbedView will"},{"type":"text","text":" "},{"type":"text","text":"obtain an ordinal for each item embedded. If the original item(s)"},{"type":"text","text":" "},{"type":"text","text":"already have ordinals, those will be removed since the item(s) no"},{"type":"text","text":" "},{"type":"text","text":"longer exist in a sibling relationship with the other ordinalized"},{"type":"text","text":" "},{"type":"text","text":"items. If you want to retain the same ordinals on the embeds as"},{"type":"text","text":" "},{"type":"text","text":"on the original items make sure the embedding occurs on the same"},{"type":"text","text":" "},{"type":"text","text":"items and in the same order as they were originally ordinalized and\/or"},{"type":"text","text":" "},{"type":"text","text":"exist in the hierarchy. EmbedView ordinals start from the first item’s"},{"type":"text","text":" "},{"type":"text","text":"ordinal number or 0."}]}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is idempotent. It can be called multiple times on"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"original"}]},{"type":"text","text":" item(s) and it will not recreate hierarchies"},{"type":"text","text":" "},{"type":"text","text":"but will update the size of the items in the hierarchy if needed."}]}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If masking a UIImageView, the front view will be a snapshot"},{"type":"text","text":" "},{"type":"text","text":"of the original image (which will be at the back)."},{"type":"text","text":" "},{"type":"text","text":"Optionally specify to give the mask a "},{"type":"codeVoice","code":"softEdge"},{"type":"text","text":" which provides"},{"type":"text","text":" "},{"type":"text","text":"a rudimentary edge softening effect. This only works on original"},{"type":"text","text":" "},{"type":"text","text":"items that can take a border\/shadow. Please note, adding a soft"},{"type":"text","text":" "},{"type":"text","text":"edge will automatically outset the LiveView by 10.0 points on"},{"type":"text","text":" "},{"type":"text","text":"all sides so that the soft edge will show. Keep this in mind"},{"type":"text","text":" "},{"type":"text","text":"when working with the LiveView."}]}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/c3\/mutator\/embedmaskedview(softedge:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Mutator\/embedMaskedView(softEdge:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"From original view(s), shape(s), text layer(s) or other"},{"type":"text","text":" "},{"type":"text","text":"layer(s) create a masked hierarchy composed of:"}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"B"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"DebuggableItem"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decoratable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FreeLayoutConstrainable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"MatrixTransformable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"MutatorExportable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"QueryDirect"},{"type":"text","text":", and "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"embedMaskedView(softEdge:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"embedMaskedView"},{"kind":"text","text":"("},{"kind":"externalParam","text":"softEdge"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Mutator","preciseIdentifier":"s:2C37MutatorV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"B","preciseIdentifier":"s:2C37MutatorVA2A14DebuggableItemR_AA11DecoratableR_AA23FreeLayoutConstrainableR_AA19MatrixTransformableR_AA11QueryDirectR_rlE1Bxmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"LiveView","preciseIdentifier":"c:@M@C3@objc(cs)LiveView"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:2C37MutatorVA2A14DebuggableItemR_AA11DecoratableR_AA23FreeLayoutConstrainableR_AA19MatrixTransformableR_AA11QueryDirectR_rlE15embedMaskedView8softEdgeACyxAA04LiveO0CGSb_tF","extendedModule":"C3","modules":[{"name":"C3"}]},"hierarchy":{"paths":[["doc:\/\/com.davidbjames.C3\/documentation\/C3","doc:\/\/com.davidbjames.C3\/documentation\/C3\/Mutator"]]},"references":{"doc://com.davidbjames.C3/documentation/C3/Query":{"role":"symbol","title":"Query","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Query"}],"abstract":[{"type":"text","text":"Core "},{"type":"codeVoice","code":"Query"},{"type":"text","text":" wrapper to one or more items of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Queryable"},{"type":"text","text":" type."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Query","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Query"}],"url":"\/documentation\/c3\/query"},"doc://com.davidbjames.C3/documentation/C3":{"role":"collection","title":"C3","abstract":[{"type":"strong","inlineContent":[{"type":"text","text":"C3UI"}]},{"type":"text","text":" is a Swift framework for developing apps on iOS and iPadOS."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3","kind":"symbol","type":"topic","url":"\/documentation\/c3"},"doc://com.davidbjames.C3/documentation/C3/QueryInterface":{"role":"symbol","title":"QueryInterface","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"QueryInterface"}],"abstract":[{"type":"text","text":"QueryInterface provides the common interface to"},{"type":"text","text":" "},{"type":"text","text":"queried items via "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Query"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Mutator"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Autolayout"},{"type":"text","text":" wrappers."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/QueryInterface","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"QueryInterface"}],"url":"\/documentation\/c3\/queryinterface"},"doc://com.davidbjames.C3/documentation/C3/Mutator":{"role":"symbol","title":"Mutator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutator"}],"abstract":[{"type":"text","text":"This wraps the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Query"},{"type":"text","text":" object that holds the items to"},{"type":"text","text":" "},{"type":"text","text":"be mutated and also conforms to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/QueryInterface"},{"type":"text","text":" "},{"type":"text","text":"suite of protocols for common functionality."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Mutator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutator"}],"url":"\/documentation\/c3\/mutator"},"doc://com.davidbjames.C3/documentation/C3/Mutator/embedMaskedView(softEdge:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"B"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"DebuggableItem"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decoratable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FreeLayoutConstrainable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"MatrixTransformable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"MutatorExportable"},{"type":"text","text":", "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"QueryDirect"},{"type":"text","text":", and "},{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Queryable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"embedMaskedView(softEdge:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"embedMaskedView"},{"kind":"text","text":"("},{"kind":"externalParam","text":"softEdge"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Mutator","preciseIdentifier":"s:2C37MutatorV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"B","preciseIdentifier":"s:2C37MutatorVA2A14DebuggableItemR_AA11DecoratableR_AA23FreeLayoutConstrainableR_AA19MatrixTransformableR_AA11QueryDirectR_rlE1Bxmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"LiveView","preciseIdentifier":"c:@M@C3@objc(cs)LiveView"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"From original view(s), shape(s), text layer(s) or other"},{"type":"text","text":" "},{"type":"text","text":"layer(s) create a masked hierarchy composed of:"}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/Mutator\/embedMaskedView(softEdge:)","kind":"symbol","type":"topic","url":"\/documentation\/c3\/mutator\/embedmaskedview(softedge:)"},"doc://com.davidbjames.C3/documentation/C3/LiveView":{"role":"symbol","title":"LiveView","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LiveView"}],"abstract":[{"type":"text","text":"Alias view that represents the “live content”"},{"type":"text","text":" "},{"type":"text","text":"that is masked within a masked hierarchy."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/LiveView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LiveView"}],"url":"\/documentation\/c3\/liveview"}}}