{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CopyId"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"codeListing","syntax":null,"code":["CopyId(\"myObject\", true)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One could store the boolean value and simply toggle it each"},{"type":"text","text":" "},{"type":"text","text":"time a refresh is needed, or use some other relevant state."},{"type":"text","text":" "},{"type":"text","text":"NOTE: the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"alternate"}]},{"type":"text","text":" stored item for a given copy id"},{"type":"text","text":" "},{"type":"text","text":"is always deleted. For example, if the copy id being"},{"type":"text","text":" "},{"type":"text","text":"used is "},{"type":"codeVoice","code":"CopyId(\"foo\", false)"},{"type":"text","text":", then storage with a"},{"type":"text","text":" "},{"type":"text","text":"copy id of "},{"type":"codeVoice","code":"CopyId(\"foo\", true)"},{"type":"text","text":" will be removed."},{"type":"text","text":" "},{"type":"text","text":"Therefore, it is important to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" think of alternate"},{"type":"text","text":" "},{"type":"text","text":"copies as a “caching” mechanism, for example on orientation"},{"type":"text","text":" "},{"type":"text","text":"change. Instead, think of it as a “refresh” mechanism."},{"type":"text","text":" "},{"type":"text","text":"The alternate version is always deleted."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/c3\/copyid"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/com.davidbjames.C3\/s23CustomStringConvertibleP","doc:\/\/com.davidbjames.C3\/SQ","doc:\/\/com.davidbjames.C3\/s43ExpressibleByExtendedGraphemeClusterLiteralP","doc:\/\/com.davidbjames.C3\/s26ExpressibleByStringLiteralP","doc:\/\/com.davidbjames.C3\/s33ExpressibleByUnicodeScalarLiteralP","doc:\/\/com.davidbjames.C3\/SH"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Copying identifier for use with API that would otherwise"},{"type":"text","text":" "},{"type":"text","text":"require expensive construction where a copy would suffice."},{"type":"text","text":" "},{"type":"text","text":"This is particularly applicable where said construction"},{"type":"text","text":" "},{"type":"text","text":"occurs within a list with repeated items that are the same"},{"type":"text","text":" "},{"type":"text","text":"such as a background or tileboard, etc."},{"type":"text","text":" "},{"type":"text","text":"Create a CopyId using a plain string or via its initializer."},{"type":"text","text":" "},{"type":"text","text":"In case it is necessary to reconstruct a copied object"},{"type":"text","text":" "},{"type":"text","text":"(e.g. when returning to a view controller to refresh"},{"type":"text","text":" "},{"type":"text","text":"the view) then create an alternating copy id using"},{"type":"text","text":" "},{"type":"text","text":"a boolean value as part of it’s initialization."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CopyId"}],"title":"CopyId","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:2C36CopyIdV","modules":[{"name":"C3"}],"navigatorTitle":[{"kind":"identifier","text":"CopyId"}]},"hierarchy":{"paths":[["doc:\/\/com.davidbjames.C3\/documentation\/C3"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/init(_:_:)-26shc","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/init(_:_:)-47d0k","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/init(_:_:)-k95v"]},{"title":"Default Implementations","identifiers":["doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/CustomStringConvertible-Implementations","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/Equatable-Implementations","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/ExpressibleByStringLiteral-Implementations","doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/ExpressibleByUnicodeScalarLiteral-Implementations"],"generated":true}],"references":{"doc://com.davidbjames.C3/s43ExpressibleByExtendedGraphemeClusterLiteralP":{"type":"unresolvable","title":"Swift.ExpressibleByExtendedGraphemeClusterLiteral","identifier":"doc:\/\/com.davidbjames.C3\/s43ExpressibleByExtendedGraphemeClusterLiteralP"},"doc://com.davidbjames.C3/documentation/C3/CopyId/init(_:_:)-k95v":{"role":"symbol","title":"init(_:_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"IdentifiableItem","preciseIdentifier":"s:2C316IdentifiableItemP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/init(_:_:)-k95v","kind":"symbol","type":"topic","url":"\/documentation\/c3\/copyid\/init(_:_:)-k95v"},"doc://com.davidbjames.C3/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/com.davidbjames.C3\/SQ"},"doc://com.davidbjames.C3/documentation/C3/CopyId/CustomStringConvertible-Implementations":{"role":"collectionGroup","title":"CustomStringConvertible Implementations","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/CustomStringConvertible-Implementations","kind":"article","type":"topic","url":"\/documentation\/c3\/copyid\/customstringconvertible-implementations"},"doc://com.davidbjames.C3/documentation/C3/CopyId/init(_:_:)-26shc":{"role":"symbol","title":"init(_:_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/init(_:_:)-26shc","kind":"symbol","type":"topic","url":"\/documentation\/c3\/copyid\/init(_:_:)-26shc"},"doc://com.davidbjames.C3/s33ExpressibleByUnicodeScalarLiteralP":{"type":"unresolvable","title":"Swift.ExpressibleByUnicodeScalarLiteral","identifier":"doc:\/\/com.davidbjames.C3\/s33ExpressibleByUnicodeScalarLiteralP"},"doc://com.davidbjames.C3/documentation/C3/CopyId/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/c3\/copyid\/equatable-implementations"},"doc://com.davidbjames.C3/documentation/C3/CopyId/ExpressibleByStringLiteral-Implementations":{"role":"collectionGroup","title":"ExpressibleByStringLiteral Implementations","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/ExpressibleByStringLiteral-Implementations","kind":"article","type":"topic","url":"\/documentation\/c3\/copyid\/expressiblebystringliteral-implementations"},"doc://com.davidbjames.C3/documentation/C3":{"role":"collection","title":"C3","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3","kind":"symbol","type":"topic","url":"\/documentation\/c3"},"doc://com.davidbjames.C3/documentation/C3/CopyId/ExpressibleByExtendedGraphemeClusterLiteral-Implementations":{"role":"collectionGroup","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","kind":"article","type":"topic","url":"\/documentation\/c3\/copyid\/expressiblebyextendedgraphemeclusterliteral-implementations"},"doc://com.davidbjames.C3/documentation/C3/CopyId/init(_:_:)-47d0k":{"role":"symbol","title":"init(_:_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"TaggableItem","preciseIdentifier":"s:2C312TaggableItemP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/init(_:_:)-47d0k","kind":"symbol","type":"topic","url":"\/documentation\/c3\/copyid\/init(_:_:)-47d0k"},"doc://com.davidbjames.C3/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/com.davidbjames.C3\/SH"},"doc://com.davidbjames.C3/documentation/C3/CopyId":{"role":"symbol","title":"CopyId","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CopyId"}],"abstract":[{"type":"text","text":"Copying identifier for use with API that would otherwise"},{"type":"text","text":" "},{"type":"text","text":"require expensive construction where a copy would suffice."},{"type":"text","text":" "},{"type":"text","text":"This is particularly applicable where said construction"},{"type":"text","text":" "},{"type":"text","text":"occurs within a list with repeated items that are the same"},{"type":"text","text":" "},{"type":"text","text":"such as a background or tileboard, etc."},{"type":"text","text":" "},{"type":"text","text":"Create a CopyId using a plain string or via its initializer."},{"type":"text","text":" "},{"type":"text","text":"In case it is necessary to reconstruct a copied object"},{"type":"text","text":" "},{"type":"text","text":"(e.g. when returning to a view controller to refresh"},{"type":"text","text":" "},{"type":"text","text":"the view) then create an alternating copy id using"},{"type":"text","text":" "},{"type":"text","text":"a boolean value as part of it’s initialization."}],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CopyId"}],"url":"\/documentation\/c3\/copyid"},"doc://com.davidbjames.C3/s26ExpressibleByStringLiteralP":{"type":"unresolvable","title":"Swift.ExpressibleByStringLiteral","identifier":"doc:\/\/com.davidbjames.C3\/s26ExpressibleByStringLiteralP"},"doc://com.davidbjames.C3/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/com.davidbjames.C3\/s23CustomStringConvertibleP"},"doc://com.davidbjames.C3/documentation/C3/CopyId/ExpressibleByUnicodeScalarLiteral-Implementations":{"role":"collectionGroup","title":"ExpressibleByUnicodeScalarLiteral Implementations","abstract":[],"identifier":"doc:\/\/com.davidbjames.C3\/documentation\/C3\/CopyId\/ExpressibleByUnicodeScalarLiteral-Implementations","kind":"article","type":"topic","url":"\/documentation\/c3\/copyid\/expressiblebyunicodescalarliteral-implementations"}}}